/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package write.your.own.jvm;

import write.your.own.jvm.classpath.Classpath;
import write.your.own.jvm.exception.MyJvmException;
import write.your.own.jvm.runtimedata.MyString;
import write.your.own.jvm.runtimedata.MyThread;
import write.your.own.jvm.runtimedata.StackFrame;
import write.your.own.jvm.runtimedata.heap.*;
import write.your.own.jvm.util.Log;
import write.your.own.jvm.vnative.NativeRegistry;

import java.util.List;

public class Main {
    public static void main(String[] args) {
        Cmd cmd = Cmd.parseArgs(args);
        printArgs(cmd);
        startJvm(cmd);
    }

    private static void startJvm(Cmd cmd) {
        Classpath classpath = new Classpath(cmd.getClasspath());
        MyClassLoader classLoader = new MyClassLoader(classpath);
        MyThread mainThread = new MyThread();

//        MyClass vmClass = classLoader.loadClass("sun/misc/VM");
//        ClassInit.initMyClass(vmClass, mainThread);

        NativeRegistry.init();

        Interpreter interpreter = new Interpreter();

        execMain(classLoader, mainThread, interpreter, cmd.getMainClass(), cmd.getArgs());
    }

    private static void execMain(MyClassLoader classLoader, MyThread thread, Interpreter interpreter, String mainClassName, List<String> args) {
        String className = mainClassName.replace(".", "/");
        MyClass mainClass = classLoader.loadClass(className);
        MyMethod mainMethod = mainClass.geMainMethod();
        ClassInit.initMyClass(mainClass, thread);
        if (mainMethod == null) {
            throw new MyJvmException("Main method not found in class: " + className);
        }
        StackFrame stackFrame = thread.newStackFrame(mainMethod);
        stackFrame.getLocalVariableTable().setRef(0, createArgs(classLoader, args));
        thread.pushStackFrame(stackFrame);
        interpreter.interpret(thread);
    }

    private static MyObject createArgs(MyClassLoader classLoader, List<String> args) {
        int size = args == null ? 0 : args.size();
        MyClass stringClass = classLoader.loadClass("java/lang/String");
        ArrayObject arrayObject = stringClass.getArrayClass().newArrayObject(size);
        for (int i = 0; i < size; i++) {
            arrayObject.setArrayElement(i, MyString.create(args.get(i), classLoader));
        }
        return arrayObject;
    }

    private static void printArgs(Cmd cmd) {
        Log.o("main class: " + cmd.getMainClass());
        Log.o("args: " + cmd.getArgs().toString());
    }
}
